apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-with-omet
  namespace: monitoring
  labels:
    app: myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      # Initialize the shared metrics file
      - name: init-metrics
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          cp /config/initial-metrics.prom /shared/metrics.prom
          chmod 666 /shared/metrics.prom
        volumeMounts:
        - name: shared-metrics
          mountPath: /shared
        - name: omet-config
          mountPath: /config
      
      containers:
      # Main application container
      - name: myapp
        image: nginx:1.21  # Replace with your actual app
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        # Your app's health checks here
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10

      # OMET sidecar container
      - name: omet-sidecar
        image: omet:latest  # Your OMET image
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Copy scripts and make executable
          cp /config/*.sh /usr/local/bin/
          chmod +x /usr/local/bin/*.sh
          
          # Run metrics collection in a loop
          while true; do
            /usr/local/bin/collect-metrics.sh || echo "Metrics collection failed"
            sleep 30
          done
        volumeMounts:
        - name: shared-metrics
          mountPath: /shared
        - name: omet-config
          mountPath: /config
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        # OMET-specific health checks
        livenessProbe:
          exec:
            command: ["/usr/local/bin/liveness-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command: ["/usr/local/bin/readiness-check.sh"]
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 2

      # Metrics exposure container (for Prometheus scraping)
      - name: metrics-server
        image: nginx:1.21-alpine
        ports:
        - containerPort: 8080
          name: metrics
        volumeMounts:
        - name: shared-metrics
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        resources:
          requests:
            memory: "16Mi"
            cpu: "5m"
          limits:
            memory: "32Mi"
            cpu: "10m"
        readinessProbe:
          httpGet:
            path: /metrics.prom
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10

      volumes:
      - name: shared-metrics
        emptyDir: {}
      - name: omet-config
        configMap:
          name: omet-config
          defaultMode: 0755
      - name: nginx-config
        configMap:
          name: nginx-metrics-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-metrics-config
  namespace: monitoring
data:
  default.conf: |
    server {
        listen 8080;
        server_name localhost;
        
        location /metrics {
            alias /usr/share/nginx/html/metrics.prom;
            add_header Content-Type text/plain;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
